name: Build

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # - target: x86_64-pc-windows-msvc
          #   flags: --no-default-features --features openssl
          - target: x86_64-pc-windows-gnu
            flags:
          - target: x86_64-unknown-linux-musl
            flags:
          - target: aarch64-unknown-linux-musl
            flags:
          # - target: armv7-unknown-linux-gnueabihf
          #   flags:
          - target: armv7-unknown-linux-musleabihf
            flags:
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.target }}-release
      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args:  --release --target ${{ matrix.target }} ${{ matrix.flags }}
      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/telegram-dice-maestro-oxide*

  #####################
  # Docker Builds
  #####################
  docker_build:
    name: Docker Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: build
    steps:
      - uses: actions/checkout@v3

      # x64 Linux MUSL
      - uses: actions/download-artifact@v3
        with:
          name: x86_64-unknown-linux-musl
          path: builds/linux/amd64
      # armv7hf Linux MUSL
      - uses: actions/download-artifact@v3
        with:
          name: armv7-unknown-linux-musleabihf
          path: builds/linux/arm/v7
      # arch64 Linux MUSL
      - uses: actions/download-artifact@v3
        with:
          name: aarch64-unknown-linux-musl
          path: builds/linux/arm64

      - name: 'Echo download path'
        run: |
          find . -name "telegram-dice-maestro-oxide" -exec chmod +x {} \;
          tree -p builds/

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          # Ref: https://github.com/containerd/containerd/blob/main/platforms/platforms.go
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: Dockerfile.gha
          outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=Telegram Dice Roller

  mac_build:
    name: Build for Mac
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-apple-darwin
            flags: --no-default-features --features openssl
          - target: aarch64-apple-darwin
            flags: --no-default-features --features openssl
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.target }}-release
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args:  --release --target ${{ matrix.target }} ${{ matrix.flags }}
      - name: Upload binary artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/telegram-dice-maestro-oxide*
